<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">


  <!--
    spring bean 등록하기

    bean 태그를 이용해서 등록
    id : bean을 구분하는 이름
    class : spring bean으로 등록할 클래스, 패키지명.클래스명 으로 작성.

  -->


    <!-- 기본 생성자로 클래스를 생성 설정 -> 기본 생성자가 있어야 한다. -->
    <bean id = "animal" class = "com.bs.spring.test.model.dto.Animal"/>

    <!-- 매개변수 있는 생성자를 이용해서 spring bean 설정하기 -->
    <bean id = "animal2" class = "com.bs.spring.test.model.dto.Animal">

      <constructor-arg index="0" value="설기"/>
      <constructor-arg index="1" value="1"/>
      <constructor-arg index="2" value="남"/>
      <constructor-arg index="3" value="3.12"/>

    </bean>


    <!-- 생성할 때 setter를 이용해서 springbean의 초기값 세팅하기 -->
    <!-- SETTERR 없으면 에러남 -->
    <bean id = "animal3" class = "com.bs.spring.test.model.dto.Animal">

      <property name="name" value="도토리 사망"/>

    </bean>

    <!--
        다른 객체를 의존하고 있을 때 spring bean 등록하기
        spring bean으로 등록할 클래스의 필드에 다른 클래스가 있을 때

        animal은 객체 즉 참조형 자료형이잖아. 그니깐 ref속성을 이용해서 다른 spring bean을 참조함
    -->

    <bean id = "person" class = "com.bs.spring.test.model.dto.Person">

      <property name="animal" ref="animal2"/>

    </bean>


    <!-- 생성자를 이용해보기 -->
    <bean id = "person1" class = "com.bs.spring.test.model.dto.Person">

      <constructor-arg index="0" value="유병승"/>
      <constructor-arg index="1" value="19"/>
      <constructor-arg index="2" value="경기도 시흥시"/>
      <constructor-arg index="3" ref="animal3"/>

    </bean>

    <!--
         spring bean을 생성, 소멸할 때 특정 로직을 실행하기
         생성 : init-method라는 속성을 이용해서 설정
         소멸 : destroy-method속성을 이용해서 설정
    -->

    <!-- 기본생성자로 생성한 다음에 setter를 이용해서 데이터 삽입! -->
    <!-- init-method : 본인 클래스(animal)의 멤버 메소드인 initTest를 불러옴!  -->
    <bean id = "animal4" class = "com.bs.spring.test.model.dto.Animal" init-method="initTest" destroy-method="destroyTest">

      <property name="name" value="뽀삐"/>
      <property name="age"  value="1"/>
      <property name="gender" value="여"/>
      <property name="weight" value="4.3"/>

    </bean>

















    <!--
        어노테이션으로 등록된 spring bean 찾기
        <context:component-scan>태그를 이용 -> spring bean을검색하는 기준을 설정
        basepackage="기준 패키지 설정"
    -->

    <!--com.bs.spring 패키지 내부에 있는 모든 클래스 검색하라는 뜻 -->
    <context:component-scan base-package="com.bs.spring"/>

    <!--
         mvc모듈에서 @Controller 기능 수행하기
         <mvc:annotation-driven/> 태그를 이용해서 controller 활성화
    -->

    <mvc:annotation-driven/>


    <!--web mvc 설정하기-->
    <!--resource 설정하기-->
    <!-- 별이 2개면(**) 계층에 상관없이 resources로 시작하는거 다! -->
    <!-- 정적인 리소스에 자원에 대한 디렉토리 연결! (img, css, js 등 ) -->
    <!-- webapp부터 경로가 시작되기에 경로는 이렇게 적으면됨. -->
    <mvc:resources mapping="/resources/**" location="/resources/"/>


    <!--
        기본 viewresolver 등록하기
        클라이언트에게 응답을 처리하는 객체를 말한다.
        jsp로 응답하는 viewresolver 등록하기
    -->

  <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">

      <property name="suffix" value=".jsp"/>
      <property name="prefix" value="/WEB-INF/views/"/>

  </bean>


  <!-- 인터셉터 이용하기 -->
  <!-- 인터셉터로 활용할 BasicInterceptor를 빈으로 등록해서 가져다 쓰자! -->
  <!-- 그냥 기본 생성! 메소드만 갖고있는 거니깐! 필드나 이런거 초기화할게 없잖아!-->
<!--  <bean id = "basicinter" class = "com.bs.spring.common.interceptor.BasicInterceptor"/>-->

  <mvc:interceptors>
    <mvc:interceptor>
      <!-- 주소 매핑! 일단 전체를 해보자!(/**) (<ref bean = "basicinter"/> 이 빈을 전체적용해본거임) -->
      <!-- <mvc:mapping path="/**"/> -->

      <!-- member  prefix를 갖는 주소들 전부 다 거쳐가! -->
      <mvc:mapping path="/member/**"/>

      <!-- bean id 적기!  -->
      <ref bean = "basicinter"/>
    </mvc:interceptor>





    <mvc:interceptor>
      <!-- /** 쓸때 resources 같은거 제대로 업로드 안되는것처럼 조금 예외처리할거 생각하면서 쓰자~-->
      <mvc:mapping path="/**"/>
      
      <!-- 전체페이지 중에서 메인페이지는 로그인 안해도 들어갈 수 있게 해줘야지; ㅠㅠ -->
      <mvc:exclude-mapping path="/"/>
      <!-- 로그인 회원가입 로그아웃은 제외-->
      <mvc:exclude-mapping path="/member/**"/>
      <!-- resources(img 등)에 있는 파일들 홈페이지에 업로드가 안되니 이것도 추가!-->
      <mvc:exclude-mapping path="/resources/**"/>
      <ref bean = "loginCheck"/>
    </mvc:interceptor>


  </mvc:interceptors>


</beans>